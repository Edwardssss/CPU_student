// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/24/2022 13:48:23"
                                                                                
// Verilog Test Bench template for design : ArithmeticUnit
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ArithmeticUnit_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] A;
reg AaddB;
reg AandB;
reg AcmpB;
reg AmulB;
reg AorB;
reg AsubB;
reg [15:0] B;
reg B15to0;
reg cin;
reg notB;
reg shlB;
reg shrB;
// wires                                               
wire [15:0]  aluout;
wire cout;
wire zout;

// assign statements (if any)                          
ArithmeticUnit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AaddB(AaddB),
	.AandB(AandB),
	.AcmpB(AcmpB),
	.AmulB(AmulB),
	.AorB(AorB),
	.AsubB(AsubB),
	.B(B),
	.B15to0(B15to0),
	.aluout(aluout),
	.cin(cin),
	.cout(cout),
	.notB(notB),
	.shlB(shlB),
	.shrB(shrB),
	.zout(zout)
);
initial                                                
begin                                                  
A = 16'b1010111100001001;
B = 16'b0101111100001111;
cin = 0;


#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;

#10 B15to0 = 1;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 1;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 1;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 1;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 1;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 1;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 1;AsubB = 0;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 1;AmulB = 0;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 1;AcmpB = 0;
#10 B15to0 = 0;AandB = 0;AorB = 0;notB = 0;shlB = 0;shrB = 0;AaddB = 0;AsubB = 0;AmulB = 0;AcmpB = 1;

#10 $stop;

end
endmodule

